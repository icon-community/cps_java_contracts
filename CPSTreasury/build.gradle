version = '1.3.3'

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.9.2'

    implementation project(':score-lib')
    implementation 'com.github.sink772:minimal-json:0.9.7'
    implementation 'foundation.icon:javaee-scorex:0.5.3'
    testImplementation project(':test-lib')
    testImplementation 'foundation.icon:javaee-unittest:0.9.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation('org.mockito:mockito-inline:4.8.0')
    intTestImplementation 'foundation.icon:icon-sdk:2.2.0'
    intTestImplementation project(":score-client")
    intTestAnnotationProcessor project(":score-client")
}

optimizedJar {
    mainClassName = 'community.icon.cps.score.cpstreasury.CPSTreasury'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

deployJar {
    endpoints {
        lisbon {
            uri = 'https://lisbon.net.solidwallet.io/api/v3'
            nid = 0x2
            to = 'cxabc97ed26cb147eeef55b1728102aea25af8f62f'
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 0x3
        }
        sejong{
            uri = 'https://sejong.net.solidwallet.io/api/v3'
            nid = 0x53
            to = 'cxb33f0187a22a41c3ecb05a9756af320e98badb7d'
        }
        berlin{
            uri = 'https://berlin.net.solidwallet.io/api/v3'
            nid = 0x7
            to = 'cx3e2a9648e4365added55bfa6a84e515d99f1bb67'
        }
        mainnet {
            uri = 'https://ctz.solidwallet.io/api/v3'
            nid = 0x1
            to = 'cxd965531d1cce5daad1d1d3ee1efb39ce68f442fc'
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {
    }
}

test {
    useJUnitPlatform {
        excludeTags("integration")
    }
}

sourceSets {
    intTest {
        java.srcDirs = [file('src/intTest/java')]

        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()


    rootProject.allprojects {
        if (it.getTasks().findByName('optimizedJar')) {
            dependsOn(it.getTasks().getByName('optimizedJar'))
        }
    }

    options {
        testLogging.showStandardStreams = true
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath
    }
}