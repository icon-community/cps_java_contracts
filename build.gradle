buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "foundation.icon:gradle-javaee-plugin:0.8.1"
    }
}

def scoreIntegrationTest = new HashMap<String, String>()

task buildContracts(type: Exec) {
    workingDir "$projectDir/"
    commandLine './gradlew', 'optimizedJar'
}

subprojects {
    repositories {
        mavenCentral()
        flatDir {
            dirs "$rootProject.projectDir/jars"
        }
    }


//    apply plugin: 'java'
//    apply plugin: 'jacoco'
    apply plugin: 'foundation.icon.javaee'

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }
    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    ext {
        env = has("network") ? getProperty("network") : 'dev'
        javaeeVersion = findProperty("javaee.version") ?: '0.9.0'
        scorexVersion = findProperty("scorex.version") ?: '0.5.2'
        javaeeUnittestVersion = findProperty("javaee-unittest.version") ?: '0.9.2'
        scoreClientVersion = findProperty("score-client.version") ?: '0.9.0'
        iconsdkVersion = findProperty("iconsdk.version") ?: '2.0.0'
        jacksonVersion = findProperty("jackson.version") ?: '2.13.2'
        mockitoVersion = findProperty("mockito.version") ?: '4.3.1'
        junitVersion = findProperty("junit.version") ?: '5.8.1'
        javafakerVersion = findProperty("javafaker.version") ?: '1.0.2'
        commonIOVersion = findProperty("common-io.version") ?: '2.11.0'

    }

    dependencies{
        compileOnly "foundation.icon:javaee-api:$javaeeVersion"
        implementation ("foundation.icon:javaee-annotation-processor:$javaeeVersion")

        implementation "foundation.icon:javaee-scorex:$scorexVersion"
        implementation "com.github.sink772:minimal-json:0.9.6"
        compileOnly name: "score-client-$scoreClientVersion"
        annotationProcessor "foundation.icon:javaee-score-client:$scoreClientVersion"

        testImplementation name: "score-client-$scoreClientVersion"
        testAnnotationProcessor "foundation.icon:javaee-score-client:$scoreClientVersion"

        implementation ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
        implementation ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
        testImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")

        testImplementation "foundation.icon:javaee-unittest:$javaeeUnittestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"



    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }

    def loadProperties = {
        def prefix = 'score-test.'
        def props = project.getProperties()
        def scoreTest = new HashMap<String, Object>()

        scoreTest.put('keystoreName', props.getOrDefault(prefix + 'keystoreName', "$rootDir/gochain-local/data/godWallet.json"))
        scoreTest.put('keystorePass', props.getOrDefault(prefix + 'keystorePass', "gochain"))
        scoreTest.put('url', props.getOrDefault(prefix + 'url', 'http://localhost:9082/api/v3'))
        scoreTest.put('nid', props.getOrDefault(prefix + 'nid', 3))

        ext['scoreTest'] = scoreTest
    }
    loadProperties()

//    tasks.named('test') {
//        // Use JUnit Platform for unit tests.
//        useJUnitPlatform()
//    }

//    scoreIntegrationTest.put('bnUSD', "https://raw.githubusercontent.com/naneey/cps-scores/main/dummy/IRC2Token.jar")
    scoreIntegrationTest.put('bnUSD', "$rootProject.projectDir/dummyJarFiles/bnUSD-0.9.1-optimized.jar")
//    scoreIntegrationTest.put('DEX', "$rootProject.projectDir/dummyJarFiles/Dex-0.9.1-optimized.jar")
//    scoreIntegrationTest.put('ROUTER', "$rootProject.projectDir/dummyJarFiles/Router-0.9.1-optimized.jar")
//    scoreIntegrationTest.put('ORACLE', "$rootProject.projectDir/dummyJarFiles/oracle-0.9.1-optimized.jar")
//    scoreIntegrationTest.put('sICX', "$rootProject.projectDir/dummyJarFiles/Sicx-0.0.1-optimized.jar")

    afterEvaluate { project ->
        scoreIntegrationTest.put(project.name, project.getTasks().getByName("optimizedJar").outputJarName)
    }

//    tasks.named("assemble") {
//        if (project.tasks.findByName("compileIntTestJava")) {
//            finalizedBy(project.tasks.getByName("compileIntTestJava"))
//        }
//    }

    gradle.taskGraph.beforeTask { Task task ->
        if (task.name == 'integrationTest') {
            scoreIntegrationTest.each { key, val ->
                task.systemProperty key, val
            }
            task.systemProperty "DEBUG_ENABLED", true
            task.systemProperty "BLOCK_INTERVAL", 50
            task.systemProperty "DEFAULT_RESULT_RETRY_WAIT", 100
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
//        taskGraph.getAllTasks().eachWithIndex { task, n ->
//            if (task.name == 'integrationTest') {
//                scoreIntegrationTest.each { key, val -> task.systemProperty key, val }
//            }
//        }
    }
}
